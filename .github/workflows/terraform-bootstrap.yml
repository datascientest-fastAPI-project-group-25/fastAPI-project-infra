# Terraform Bootstrap Infrastructure Workflow
#
# Purpose:
# This workflow manages the essential infrastructure components needed for Terraform state management
# and other foundational AWS resources. It is intentionally restricted to run only when bootstrap-related
# changes are made to ensure infrastructure stability.
#
# Trigger Conditions:
# 1. Push to branches matching 'bootstrap/*'
# 2. Pull requests targeting main that modify bootstrap-related files
# 3. Manual trigger via workflow_dispatch
#
# Security Note:
# This workflow has elevated permissions as it manages foundational infrastructure.
# Changes should be thoroughly reviewed before merging.

name: Terraform Bootstrap Infrastructure

on:
  push:
    branches:
      - 'bootstrap/**'
  pull_request:
    branches:
      - main
    paths:
      - 'bootstrap/**'
      - 'terraform/modules/terraform-state/**'
      - 'terraform/modules/logging/**'
      - 'terraform/modules/security/**'
      - '.github/workflows/terraform-bootstrap.yml'
  workflow_dispatch:

# Prevent concurrent bootstrap operations
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read
  pull-requests: write
  actions: write

jobs:
  # Add pre-check job to validate if bootstrap resources need updating
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      bootstrap_needed: ${{ steps.check.outputs.bootstrap_needed }}
      cache_key: ${{ steps.cache_key.outputs.hash }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate cache key
        id: cache_key
        run: |
          # Create hash from bootstrap files and workflow
          HASH=$(find bootstrap terraform/modules -type f -name "*.tf" -o -name "*.tfvars" -o -name "*.yml" -exec sha256sum {} \; | sha256sum | cut -d ' ' -f1)
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Check for relevant changes
        id: check
        run: |
          # If triggered by bootstrap/* branch push, always run
          if [[ "${{ github.ref }}" == refs/heads/bootstrap/* ]]; then
            echo "Changes from bootstrap branch, requiring bootstrap"
            echo "bootstrap_needed=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # For other triggers, check changed files
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_files.txt
          
          # Check if any bootstrap-related files were modified
          if grep -q -E '^bootstrap/|^terraform/modules/(terraform-state|logging|security)/' changed_files.txt; then
            echo "Bootstrap-related files were modified"
            echo "bootstrap_needed=true" >> $GITHUB_OUTPUT
          else
            echo "No bootstrap-related files were modified"
            echo "bootstrap_needed=false" >> $GITHUB_OUTPUT
          fi

  bootstrap:
    needs: check-changes
    if: needs.check-changes.outputs.bootstrap_needed == 'true' || github.event_name == 'workflow_dispatch'
    name: Bootstrap Infrastructure
    runs-on: ubuntu-latest
    outputs:
      infra_role_created: ${{ steps.check_role.outputs.exists }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: us-east-1
      PROJECT_NAME: fastapi-project
      TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      TF_VAR_github_repo: ${{ github.repository }}
      TF_INPUT: false
      TF_IN_AUTOMATION: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache Terraform CLI installation
      - name: Cache Terraform CLI
        uses: actions/cache@v4
        id: cache-terraform
        with:
          path: /usr/local/bin/terraform
          key: terraform-1.5.7
          restore-keys: |
            terraform-1.5

      # Only install Terraform if not cached
      - name: Setup Terraform
        if: steps.cache-terraform.outputs.cache-hit != 'true'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Cache AWS CLI installation
      - name: Cache AWS CLI
        uses: actions/cache@v4
        id: cache-aws
        with:
          path: ~/.aws/cli
          key: aws-cli-2.x
          restore-keys: |
            aws-cli-

      # Configure AWS credentials
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Cache Terraform providers and modules
      - name: Cache Terraform providers and modules
        uses: actions/cache@v4
        with:
          path: |
            **/.terraform
            ~/.terraform.d/plugin-cache
          key: terraform-bootstrap-deps-${{ needs.check-changes.outputs.cache_key }}
          restore-keys: |
            terraform-bootstrap-deps-

      # Cache Terraform plan
      - name: Cache Terraform plan
        uses: actions/cache@v4
        with:
          path: tfplan
          key: terraform-bootstrap-plan-${{ needs.check-changes.outputs.cache_key }}

      - name: Check if FastAPIProjectBootstrapInfraRole exists
        id: check_role
        run: |
          if aws iam get-role --role-name FastAPIProjectBootstrapInfraRole 2>/dev/null; then
            echo "Role exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Role does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Plan Terraform Changes
        working-directory: ./bootstrap/environments/aws
        run: |
          terraform init -backend=false
          terraform plan -out=tfplan

      - name: Apply Terraform Changes
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/bootstrap/')
        working-directory: ./bootstrap/environments/aws
        run: |
          terraform apply -auto-approve tfplan

  terraform:
    name: Terraform Infrastructure Deployment
    needs: [check-changes, bootstrap]
    if: |
      needs.check-changes.outputs.bootstrap_needed == 'true' &&
      needs.bootstrap.outputs.infra_role_created == 'true'
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: us-east-1
      PROJECT_NAME: fastapi-project
      TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      TF_VAR_github_repo: ${{ github.repository }}
      TF_INPUT: false
      TF_IN_AUTOMATION: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Reuse cached Terraform CLI
      - name: Cache Terraform CLI
        uses: actions/cache@v4
        id: cache-terraform
        with:
          path: /usr/local/bin/terraform
          key: terraform-1.5.7
          restore-keys: |
            terraform-1.5

      # Only install Terraform if not cached
      - name: Setup Terraform
        if: steps.cache-terraform.outputs.cache-hit != 'true'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Configure AWS credentials
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Reuse cached providers and modules
      - name: Cache Terraform providers and modules
        uses: actions/cache@v4
        with:
          path: |
            **/.terraform
            ~/.terraform.d/plugin-cache
          key: terraform-bootstrap-deps-${{ needs.check-changes.outputs.cache_key }}

      - name: Initialize Terraform
        working-directory: ./bootstrap/environments/aws
        run: |
          BUCKET_NAME="fastapi-project-terraform-state-${AWS_ACCOUNT_ID}"
          terraform init -reconfigure \
            -backend-config=backend.hcl \
            -backend-config="bucket=${BUCKET_NAME}"

      - name: Plan and Apply Changes
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/bootstrap/')
        working-directory: ./bootstrap/environments/aws
        run: |
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan
