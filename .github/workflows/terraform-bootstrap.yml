name: Terraform Bootstrap Infrastructure

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - '**.tf'
      - '.github/workflows/**'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write
  actions: write

jobs:
  bootstrap:
    name: Bootstrap Infrastructure
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest
    defaults:
      run:
        shell: bash
    outputs:
      infra_role_created: ${{ steps.check_role.outputs.exists }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: eu-west-2
      PROJECT_NAME: fastapi-project
      ENVIRONMENT: dev
      TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      TF_VAR_github_repo: ${{ github.repository }}
      TF_INPUT: false
      TF_IN_AUTOMATION: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Terraform and AWS CLI
        run: |
          apt-get update
          apt-get install -y curl unzip
          # Install Terraform
          curl -LO https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
          # Check if terraform exists and remove it if it's a directory
          if [ -d "terraform" ]; then
            rm -rf terraform
          fi
          unzip -o terraform_1.5.7_linux_amd64.zip
          mv terraform /usr/bin/
          terraform --version
          # Install AWS CLI
          apt-get install -y python3-pip
          pip3 install --break-system-packages awscli
          aws --version

      - name: Verify required files
        run: |
          required_files=(
            "bootstrap/environments/aws/setup-state-bucket.sh"
            "bootstrap/environments/aws/apply-bootstrap.sh"
            "bootstrap/environments/aws/main.tf"
            "bootstrap/scripts/load-env.sh"
          )

          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Error: Required file $file not found"
              exit 1
            else
              echo "âœ“ Found $file"
            fi
          done

      - name: Configure AWS credentials
        run: |
          if [ "$GITHUB_ACTIONS" = "true" ]; then
            echo "Running in GitHub Actions..."
          else
            echo "Running locally with act..."
          fi
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws configure set region "$AWS_DEFAULT_REGION"

      - name: Validate AWS credentials
        run: |
          aws sts get-caller-identity || {
            echo "Failed to validate AWS credentials"
            exit 1
          }

      - name: Set up state bucket
        working-directory: ./bootstrap/environments/aws
        run: |
          if [ ! -f "setup-state-bucket.sh" ]; then
            echo "Error: setup-state-bucket.sh not found"
            ls -la
            exit 1
          fi
          bash setup-state-bucket.sh

      - name: Apply bootstrap configuration
        working-directory: ./bootstrap/environments/aws
        run: |
          if [ ! -f "apply-bootstrap.sh" ]; then
            echo "Error: apply-bootstrap.sh not found"
            ls -la
            exit 1
          fi
          bash apply-bootstrap.sh

      - name: Check if FastAPIProjectBootstrapInfraRole exists
        id: check_role
        run: |
          if aws iam get-role --role-name FastAPIProjectBootstrapInfraRole 2>/dev/null; then
            echo "Role exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Role does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Bootstrap Resources
        if: steps.check_role.outputs.exists != 'true'
        working-directory: ./bootstrap/environments/aws
        run: |
          terraform init
          terraform apply -auto-approve

  terraform:
    name: Terraform Infrastructure Deployment
    needs: bootstrap
    if: ${{ needs.bootstrap.outputs.infra_role_created == 'true' }}
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest
    defaults:
      run:
        shell: bash
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: eu-west-2
      PROJECT_NAME: fastapi-project
      ENVIRONMENT: dev
      TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      TF_VAR_github_repo: ${{ github.repository }}
      TF_INPUT: false
      TF_IN_AUTOMATION: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Terraform and AWS CLI
        run: |
          apt-get update
          apt-get install -y curl unzip
          # Install Terraform
          curl -LO https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
          # Check if terraform exists and remove it if it's a directory
          if [ -d "terraform" ]; then
            rm -rf terraform
          fi
          unzip -o terraform_1.5.7_linux_amd64.zip
          mv terraform /usr/bin/
          terraform --version
          # Install AWS CLI
          apt-get install -y python3-pip
          pip3 install --break-system-packages awscli
          aws --version

      - name: Configure AWS credentials
        run: |
          if [ "$GITHUB_ACTIONS" = "true" ]; then
            echo "Running in GitHub Actions..."
          else
            echo "Running locally with act..."
          fi
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws configure set region "$AWS_DEFAULT_REGION"

      - name: Validate AWS credentials
        run: |
          aws sts get-caller-identity || {
            echo "Failed to validate AWS credentials"
            exit 1
          }

      - name: Initialize Terraform
        working-directory: ./bootstrap/environments/aws
        run: terraform init

      - name: Plan Terraform Changes
        working-directory: ./bootstrap/environments/aws
        run: terraform plan -out=tfplan

      - name: Apply Terraform Changes
        working-directory: ./bootstrap/environments/aws
        run: terraform apply tfplan
