name: Terraform Infrastructure Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'bootstrap/**'
      - 'terraform/modules/terraform-state/**'
      - 'terraform/modules/logging/**'
      - 'terraform/modules/security/**'
      - '.github/workflows/terraform-bootstrap.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (stg/prod)'
        required: false
        default: 'stg'
        type: choice
        options:
          - stg
          - prod

# Prevent parallel deployments for same environment
concurrency:
  group: terraform-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  actions: write

jobs:
  determine_environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set_env.outputs.environment }}
      cache_key: ${{ steps.cache_key.outputs.hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate cache key
        id: cache_key
        run: |
          HASH=$(find . -type f -name "*.tf" -o -name "*.tfvars" -o -name "*.yml" -exec sha256sum {} \; | sha256sum | cut -d ' ' -f1)
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Set environment based on context
        id: set_env
        run: |
          if [[ "${{ github.event.inputs.environment }}" != "" ]]; then
            if [[ "${{ github.event.inputs.environment }}" == "stg" ]]; then
              echo "environment=staging" >> $GITHUB_OUTPUT
            else
              echo "environment=production" >> $GITHUB_OUTPUT
            fi
            exit 0
          fi

          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

  terraform:
    name: Terraform
    needs: determine_environment
    runs-on: ubuntu-latest
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: "us-east-1"
      PROJECT_NAME: "fastapi-project"
      ENVIRONMENT: ${{ needs.determine_environment.outputs.environment }}
      TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      TF_VAR_github_repo: ${{ github.repository }}
      TF_VAR_github_org: "datascientest-fastAPI-project-group-25"
      TF_INPUT: false
      TF_IN_AUTOMATION: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Print GitHub context details
      - name: Debug GitHub Context
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Environment: ${{ needs.determine_environment.outputs.environment }}"

      # Configure AWS credentials
      - name: Configure AWS credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region=us-east-1" >> ~/.aws/config
          echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV
          echo "Using AWS account ID: ${{ secrets.AWS_ACCOUNT_ID }}"

      # Cache Terraform CLI installation
      - name: Cache Terraform CLI
        uses: actions/cache@v4
        id: cache-terraform
        with:
          path: /usr/local/bin/terraform
          key: terraform-1.5.7
          restore-keys: |
            terraform-1.5

      # Only install Terraform if not cached
      - name: Setup Terraform
        if: steps.cache-terraform.outputs.cache-hit != 'true'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Cache AWS CLI installation
      - name: Cache AWS CLI
        uses: actions/cache@v4
        id: cache-aws
        with:
          path: ~/.aws/cli
          key: aws-cli-2.x
          restore-keys: |
            aws-cli-

      # Cache Terraform providers and modules
      - name: Cache Terraform providers and modules
        uses: actions/cache@v4
        with:
          path: |
            **/.terraform
            ~/.terraform.d/plugin-cache
          key: terraform-deps-${{ needs.determine_environment.outputs.cache_key }}
          restore-keys: |
            terraform-deps-

      - name: Cache Terraform plan
        uses: actions/cache@v4
        with:
          path: tfplan
          key: terraform-plan-${{ needs.determine_environment.outputs.cache_key }}

      - name: Terraform Format
        run: |
          cd terraform
          terraform fmt -check -recursive

      # Initialize and plan for both environments on PR
      - name: Initialize and Plan - PR
        if: github.event_name == 'pull_request'
        run: |
          # Map short names to directory names
          declare -A env_dirs
          env_dirs[staging]=stg
          env_dirs[production]=prod

          # Create backend config files
          mkdir -p /tmp/backend-configs

          for env in staging production; do
            dir=${env_dirs[$env]}
            echo "Planning changes for $env environment (directory: $dir)..."

            # Create backend config file
            cat > /tmp/backend-configs/${dir}.tfbackend << EOT
            bucket = "fastapi-project-terraform-state-${AWS_ACCOUNT_ID}"
            key = "fastapi/infra/$dir/terraform.tfstate"
            region = "${AWS_DEFAULT_REGION}"
            dynamodb_table = "terraform-state-lock"
            EOT

                        cd terraform/environments/deploy/$dir
                        terraform init -backend-config=/tmp/backend-configs/${dir}.tfbackend
                        terraform plan -var-file=terraform.tfvars -out=${dir}.tfplan
                        cd ../../../
                      done

      # Initialize and apply for production on main
      - name: Deploy to Production
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Create backend config file
          mkdir -p /tmp/backend-configs
          cat > /tmp/backend-configs/prod.tfbackend << EOT
          bucket = "fastapi-project-terraform-state-${AWS_ACCOUNT_ID}"
          key = "fastapi/infra/prod/terraform.tfstate"
          region = "${AWS_DEFAULT_REGION}"
          dynamodb_table = "terraform-state-lock"
          EOT

                    cd terraform/environments/deploy/prod
                    terraform init -backend-config=/tmp/backend-configs/prod.tfbackend
                    terraform plan -var-file=terraform.tfvars -out=tfplan
                    terraform apply -auto-approve tfplan

      # Comment plan output on PR
      - name: Comment Plan Output
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let comment = '## Terraform Plan Output\n\n';

            for (const env of ['stg', 'prod']) {
              const planPath = `terraform/environments/deploy/${env}/${env}.tfplan`;
              if (fs.existsSync(planPath)) {
                comment += `### ${env.toUpperCase()} Environment\n\`\`\`hcl\n`;
                comment += fs.readFileSync(planPath, 'utf8');
                comment += '\n\`\`\`\n\n';
              }
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
