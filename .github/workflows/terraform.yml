name: Terraform Infrastructure Deployment

on:
  push:
    branches:
      - main
      - development
      - 'fix/**'
      - 'feat/**'
    paths-ignore:
      - 'bootstrap/**'
      - 'terraform/modules/terraform-state/**'
      - 'terraform/modules/logging/**'
      - 'terraform/modules/security/**'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'bootstrap/**'
      - 'terraform/modules/terraform-state/**'
      - 'terraform/modules/logging/**'
      - 'terraform/modules/security/**'
  workflow_dispatch:

# Prevent parallel deployments for same environment
concurrency:
  group: terraform-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read
  pull-requests: write
  actions: write

jobs:
  determine_environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set_env.outputs.environment }}
      cache_key: ${{ steps.cache_key.outputs.hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate cache key
        id: cache_key
        run: |
          # Create hash from terraform files and workflow
          HASH=$(find . -type f -name "*.tf" -o -name "*.tfvars" -o -name "*.yml" -exec sha256sum {} \; | sha256sum | cut -d ' ' -f1)
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Set environment based on branch
        id: set_env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

  terraform:
    name: Terraform
    needs: determine_environment
    runs-on: ubuntu-latest
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: "us-east-1"
      PROJECT_NAME: "fastapi-project"
      ENVIRONMENT: ${{ needs.determine_environment.outputs.environment }}
      TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      TF_VAR_github_repo: ${{ github.repository }}
      TF_INPUT: false
      TF_IN_AUTOMATION: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache Terraform CLI installation
      - name: Cache Terraform CLI
        uses: actions/cache@v4
        id: cache-terraform
        with:
          path: /usr/local/bin/terraform
          key: terraform-1.5.7
          restore-keys: |
            terraform-1.5

      # Only install Terraform if not cached
      - name: Setup Terraform
        if: steps.cache-terraform.outputs.cache-hit != 'true'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Cache AWS CLI installation
      - name: Cache AWS CLI
        uses: actions/cache@v4
        id: cache-aws
        with:
          path: ~/.aws/cli
          key: aws-cli-2.x
          restore-keys: |
            aws-cli-

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-${{ needs.determine_environment.outputs.environment }}
          aws-region: us-east-1

      # Cache Terraform providers and modules
      - name: Cache Terraform providers and modules
        uses: actions/cache@v4
        with:
          path: |
            **/.terraform
            ~/.terraform.d/plugin-cache
          key: terraform-deps-${{ needs.determine_environment.outputs.cache_key }}
          restore-keys: |
            terraform-deps-

      - name: Cache Terraform plan
        uses: actions/cache@v4
        with:
          path: tfplan
          key: terraform-plan-${{ needs.determine_environment.outputs.cache_key }}

      - name: Validate AWS credentials
        run: |
          aws sts get-caller-identity || {
            echo "Failed to validate AWS credentials"
            exit 1
          }

      - name: Terraform Format
        run: |
          cd terraform
          terraform fmt -check -recursive

      - name: Terraform Init - ${{ needs.determine_environment.outputs.environment }}
        run: |
          cd terraform/environments/clean-deploy/${{ needs.determine_environment.outputs.environment }}
          terraform init \
            -backend-config="bucket=fastapi-project-terraform-state-${AWS_ACCOUNT_ID}" \
            -backend-config="key=fastapi/infra/${{ needs.determine_environment.outputs.environment }}/terraform.tfstate" \
            -backend-config="region=${AWS_DEFAULT_REGION}" \
            -backend-config="dynamodb_table=terraform-state-lock-dev"

      - name: Terraform Plan - ${{ needs.determine_environment.outputs.environment }}
        run: |
          cd terraform/environments/clean-deploy/${{ needs.determine_environment.outputs.environment }}
          terraform plan -var-file=terraform.tfvars -out=tfplan

      - name: Terraform Apply - ${{ needs.determine_environment.outputs.environment }}
        if: |
          github.event_name == 'push' && (
            (needs.determine_environment.outputs.environment == 'development' && (github.ref == 'refs/heads/development' || startsWith(github.ref, 'refs/heads/fix/') || startsWith(github.ref, 'refs/heads/feat/'))) ||
            (needs.determine_environment.outputs.environment == 'staging' && github.ref == 'refs/heads/development') ||
            (needs.determine_environment.outputs.environment == 'production' && github.ref == 'refs/heads/main')
          )
        run: |
          cd terraform/environments/clean-deploy/${{ needs.determine_environment.outputs.environment }}
          terraform apply -var-file=terraform.tfvars -auto-approve
